package Pr8;

class BoundedWaitList<E> extends WaitList<E>{
    private final int capacity;
    public BoundedWaitList(int capacity) {
        this.capacity = capacity;
    }
    public int getCapacity() {
        return this.capacity;
    }
    public void add(E element) {

        if(this.content.size() < this.capacity) {
            super.add(element);
        }
    }
    @Override
    public String toString() {
        return this.content.toString() + ". Capacity " + this.capacity;
    }
}

package Pr8;
import java.util.Collection;

public interface IWaitList<E> {
    void add(E element);
    E remove();
    boolean contains(E element);
    boolean containsAll(Collection<E> c);
    boolean isEmpty();

}

package Pr8;
import java.util.ArrayList;
import java.util.List;

public class Test {
    public static void main(String[] args) {
        WaitList<Integer> lst1 = new BoundedWaitList<Integer>(5);
        lst1.add(1);
        lst1.add(3);
        lst1.add(77);
        lst1.add(14);
        System.out.print("Correct List: " + lst1.content + "\n");

        WaitList<Integer> lst2 = new BoundedWaitList<>(3);
        lst2.add(1);
        lst2.add(2);
        lst2.add(3);
        lst2.add(4);
        lst2.add(5);
        System.out.print("Uncorrect List(unc. capacity): " + lst2.content + "\n");

        WaitList<Integer> lst3 = new UnfairWaitList<>();
        lst3.content.add(1);
        lst3.content.add(2);
        lst3.content.add(3);
        System.out.print("List without removes elements: " + lst3.content + "\n");
        lst3.content.remove(2);
        lst3.content.remove(3);
        System.out.print("List with removes elements: " + lst3.content + "\n");

        WaitList<Integer> lst4 = new WaitList<Integer>();
        lst4.content.add(1);
        lst4.content.add(12);
        lst4.content.add(123);
        lst4.content.add(1234);
        lst4.content.add(12345);
        System.out.print("Current List: " + lst4.content + "\n");
        lst4.content.remove(1234);
        System.out.print("Current List: " + lst4.content + "\n");
        System.out.print("List Contains 12345 - " + lst4.content.contains(12345) + "\n");

        List<Integer> lst5 = new ArrayList<Integer>();
        lst5.add(1);
        lst5.add(2);
        lst5.add(3);
        lst5.add(4);
        System.out.print("List Contains all - " + lst4.content.containsAll(lst5)+"\n");
        System.out.print("List is empty - " + lst4.content.isEmpty() + "\n");

    }
}
package Pr8;

public class UnfairWaitList<E> extends WaitList<E> {
    public UnfairWaitList() { }
    public void remove(E element) {
        this.content.remove(element);
    }
    public void moveToBack(E element) {
        if(this.content.remove(element)) {
            this.content.add(element);
        }
    }

}

package Pr8;
import java.util.Collection;
import java.util.concurrent.ConcurrentLinkedQueue;


public class WaitList<E> implements IWaitList<E> {
    protected ConcurrentLinkedQueue<E> content;
    public WaitList() {
        this.content = new ConcurrentLinkedQueue<>();
    }
    public WaitList(Collection<E> c) {
        this.content = new ConcurrentLinkedQueue<>(c);
    }
    public void add(E element) {
        this.content.add(element);
    }
    public E remove() {
        return this.content.poll();
    }
    public boolean contains(E element) {
        return this.content.contains(element);
    }
    public boolean containsAll(Collection<E> c){
        return this.content.containsAll(c);
    }
    public boolean isEmpty() {
        return this.content.isEmpty();
    }
    @Override
    public String toString() {
        return this.content.toString();
    }
}
